// pages/api/chat.ts
import type { NextApiRequest, NextApiResponse } from 'next';
import Database from 'better-sqlite3';

// –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π (–ø—É—Ç—å –∫ —Ç–≤–æ–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö)
const db = new Database('./data/users.db');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∞–≥–µ–Ω—Ç–∞ –ø–æ openaiId
function getAgentByOpenaiId(openaiId: string) {
  const stmt = db.prepare('SELECT * FROM agents WHERE openaiId = ?');
  return stmt.get(openaiId);
}

const handler = async (req: NextApiRequest, res: NextApiResponse) => {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { message, assistant_id } = req.body;

  if (!message || !assistant_id) {
    return res.status(400).json({ error: 'Missing message or assistant_id' });
  }

  if (typeof assistant_id !== 'string' || !assistant_id.startsWith('asst')) {
    return res.status(400).json({ error: 'Invalid assistant_id format' });
  }

  if (!process.env.OPENAI_API_KEY) {
    return res.status(500).json({ error: 'OpenAI API key not configured' });
  }

  // === –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞ –≤ –±–∞–∑–µ ===
  const agent = getAgentByOpenaiId(assistant_id);

  if (!agent) {
    return res.status(404).json({ error: '–ê–≥–µ–Ω—Ç —Å —Ç–∞–∫–∏–º assistant_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ' });
  }

  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ä–∞–±–æ—Ç—É —Å Assistant API');
    console.log('Assistant ID:', assistant_id);

    // –°–æ–∑–¥–∞—ë–º thread
    const threadRes = await fetch('https://api.openai.com/v1/threads', {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v2',
        'Content-Type': 'application/json'
      }
    });

    if (!threadRes.ok) {
      const error = await threadRes.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è thread:', error);
      throw new Error(`Thread creation failed: ${error}`);
    }

    const thread = await threadRes.json();
    console.log('‚úÖ Thread —Å–æ–∑–¥–∞–Ω:', thread.id);

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    const messageRes = await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v2',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        role: 'user',
        content: message
      })
    });

    if (!messageRes.ok) {
      const error = await messageRes.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
      throw new Error(`Message creation failed: ${error}`);
    }

    console.log('‚úâÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ');

    // –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞
    const runRes = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs`, {
      method: 'POST',
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v2',
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({ assistant_id })
    });

    if (!runRes.ok) {
      const error = await runRes.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ run:', error);
      throw new Error(`Run creation failed: ${error}`);
    }

    const run = await runRes.json();
    console.log('‚ñ∂Ô∏è Run –∑–∞–ø—É—â–µ–Ω:', run.id);

    // –û–∂–∏–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è run
    let status = 'queued';
    let attempts = 0;
    const maxAttempts = 30;

    while (status !== 'completed' && status !== 'failed' && attempts < maxAttempts) {
      await new Promise(resolve => setTimeout(resolve, 1000));
      const statusRes = await fetch(`https://api.openai.com/v1/threads/${thread.id}/runs/${run.id}`, {
        headers: {
          Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
          'OpenAI-Beta': 'assistants=v2'
        }
      });

      if (!statusRes.ok) {
        const error = await statusRes.text();
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:', error);
        throw new Error(`Status check failed: ${error}`);
      }

      const statusData = await statusRes.json();
      status = statusData.status;
      console.log(`‚è≥ –°—Ç–∞—Ç—É—Å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${status} (–ø–æ–ø—ã—Ç–∫–∞ ${attempts + 1})`);

      if (status === 'failed') {
        console.error('‚ùå Run –∑–∞–≤–µ—Ä—à–∏–ª—Å—è —Å –æ—à–∏–±–∫–æ–π:', statusData);
        throw new Error(`Assistant run failed: ${statusData.last_error?.message || 'Unknown error'}`);
      }

      attempts++;
    }

    if (status !== 'completed') {
      throw new Error(`Run timeout after ${maxAttempts} attempts. Status: ${status}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    const messagesRes = await fetch(`https://api.openai.com/v1/threads/${thread.id}/messages`, {
      headers: {
        Authorization: `Bearer ${process.env.OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v2'
      }
    });

    if (!messagesRes.ok) {
      const error = await messagesRes.text();
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π:', error);
      throw new Error(`Messages fetch failed: ${error}`);
    }

    const messagesData = await messagesRes.json();
    console.log('üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π:', messagesData.data?.length);

    const lastAssistantMessage = messagesData.data?.find((msg: any) => msg.role === 'assistant');

    if (!lastAssistantMessage) {
      console.log('‚ö†Ô∏è –ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞');
      return res.status(200).json({ role: 'assistant', content: '–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –¥–∞–ª –æ—Ç–≤–µ—Ç–∞.' });
    }

    const responseContent = lastAssistantMessage.content[0]?.text?.value || '–ü—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –æ—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç–∞';
    console.log('‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω:', responseContent.substring(0, 100) + '...');

    return res.status(200).json({ role: 'assistant', content: responseContent });

  } catch (error: any) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ Assistant API:', error);
    return res.status(500).json({ error: `–û—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ —Å OpenAI: ${error.message}` });
  }
};

export default handler;

